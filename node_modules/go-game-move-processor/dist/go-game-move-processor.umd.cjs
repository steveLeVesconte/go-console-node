(function(l,a){typeof exports=="object"&&typeof module<"u"?a(exports):typeof define=="function"&&define.amd?define(["exports"],a):(l=typeof globalThis<"u"?globalThis:l||self,a(l["go-game-move-processor"]={}))})(this,function(l){"use strict";var X=Object.defineProperty;var q=(l,a,d)=>a in l?X(l,a,{enumerable:!0,configurable:!0,writable:!0,value:d}):l[a]=d;var s=(l,a,d)=>(q(l,typeof a!="symbol"?a+"":a,d),d);const a="b",d="w",p="_",v="pass",g="exit";class T{constructor(t,r,o){s(this,"strinColor");s(this,"row");s(this,"col");s(this,"group",null);s(this,"liberties",null);s(this,"adjacentIntersections",[]);this.row=t,this.col=r,this.strinColor=o,this.intialize()}intialize(){this.row>0&&this.adjacentIntersections.push({row:this.row-1,col:this.col}),this.row<18&&this.adjacentIntersections.push({row:this.row+1,col:this.col}),this.col>0&&this.adjacentIntersections.push({row:this.row,col:this.col-1}),this.col<18&&this.adjacentIntersections.push({row:this.row,col:this.col+1})}}class P{constructor(t){s(this,"stoneColor");s(this,"liberties",0);s(this,"libertiesSet",new Set);s(this,"intersections",[]);this.stoneColor=t}}class I{constructor(t){s(this,"board");s(this,"stoneGroups",[]);this.board=this.populateGoBoard(t),this.applyGroupAnIntersectionToBoard()}populateGoBoard(t){const r=[];for(let o=0;o<19;o++){const n=[];for(let i=0;i<19;i++)n[i]=new T(o,i,t[o][i]);r.push(n)}return r}groupAnIntersection(t,r,o){let n=null;t.group||t.strinColor===r&&(o?(n=o,t.group=o,n.intersections.push(t)):(n=new P(r),n.intersections.push(t),this.stoneGroups.push(n)),t.group=n,t.adjacentIntersections.forEach(i=>{const h=this.board[i.row][i.col];h.strinColor===p&&(n.liberties++,n==null||n.libertiesSet.add(h.row.toString().padStart(2,"0")+h.col.toString().padStart(2,"0"))),this.groupAnIntersection(h,r,n)}))}applyGroupAnIntersectionToBoard(){for(const t of this.board)for(const r of t)r.strinColor!==p&&!r.group&&this.groupAnIntersection(r,r.strinColor,null)}}class f{constructor(){s(this,"isValidSubmission",!1);s(this,"isLegalPlay",!1);s(this,"newBoard",[]);s(this,"newKoCompareBoard",[]);s(this,"capturedStones",0);s(this,"isAtari",!1);s(this,"isKo",!1);s(this,"isSuicide",!1);s(this,"isCollision",!1);s(this,"isPass",!1);s(this,"isExit",!1);s(this,"reasonSubmissionInvalid","");s(this,"stonePlay",null);s(this,"stoneColorOfNextTurn","")}}class c extends f{constructor(t,r,o,n){super(),this.isValidSubmission=!1,this.isLegalPlay=!1,this.newBoard=t,this.newKoCompareBoard=r,this.capturedStones=0,this.isAtari=!1,this.isKo=!1,this.isSuicide=!1,this.isCollision=!1,this.isPass=!1,this.isExit=!1,this.stonePlay=n.stonePlay,this.reasonSubmissionInvalid=o,this.stoneColorOfNextTurn=n.stoneColorOfThisTurn}}class O extends f{constructor(t,r,o){super(),this.isValidSubmission=!0,this.isLegalPlay=!0,this.newBoard=t,this.newKoCompareBoard=r,this.capturedStones=0,this.isAtari=!1,this.isKo=!1,this.isSuicide=!1,this.isCollision=!1,this.isPass=!0,this.isExit=!1,this.reasonSubmissionInvalid="",this.stoneColorOfNextTurn=o.stoneColorOfThisTurn==a?d:a}}class A extends f{constructor(){super(),this.isExit=!0}}class x extends f{constructor(t,r,o,n,i){super(),this.isValidSubmission=!0,this.isLegalPlay=!0,this.newBoard=t,this.newKoCompareBoard=r,this.capturedStones=o,this.isAtari=n,this.isKo=!1,this.isSuicide=!1,this.isCollision=!1,this.isPass=!1,this.isExit=!1,this.reasonSubmissionInvalid="",this.stonePlay=i.stonePlay,this.stoneColorOfNextTurn=i.stoneColorOfThisTurn==a?d:a}}class N extends f{constructor(t,r,o){super(),this.isValidSubmission=!0,this.isLegalPlay=!1,this.newBoard=t,this.newKoCompareBoard=r,this.capturedStones=0,this.isAtari=!1,this.isKo=!0,this.isSuicide=!1,this.isCollision=!1,this.isPass=!1,this.isExit=!1,this.reasonSubmissionInvalid="",this.stonePlay=o.stonePlay,this.stoneColorOfNextTurn=o.stoneColorOfThisTurn}}class G extends f{constructor(t,r,o){super(),this.isValidSubmission=!0,this.isLegalPlay=!1,this.newBoard=t,this.newKoCompareBoard=r,this.capturedStones=0,this.isAtari=!1,this.isKo=!1,this.isSuicide=!0,this.isCollision=!1,this.isPass=!1,this.isExit=!1,this.reasonSubmissionInvalid="",this.stonePlay=o.stonePlay,this.stoneColorOfNextTurn=o.stoneColorOfThisTurn}}class u{constructor(t=!1,r){this.submissionHandled=t,this.submissionResult=r}}function R(e){if(e.actionType==g)return new A;if(e.actionType==v)return new O(e.currentBoard,e.currentBoard,e);let t=E(e);return t.submissionHandled||(t=V(e),t.submissionHandled)||(t=j(e),t.submissionHandled)?t.submissionResult:K(e).submissionResult}function K(e){const t=M(e),r=new I(t),o=e.stoneColorOfThisTurn===d?a:d,n=C(r.stoneGroups,o),i=y(n);if(L(i,r,e))return new u(!0,new G(e.currentBoard,e.previousBoard,e));const h=Y(t,i);return J(t,e.previousBoard)?new u(!0,new N(e.currentBoard,e.previousBoard,e)):new u(!0,new x(t,e.currentBoard,h,H(n),e))}function E(e){const t=e.stonePlay;if(t.col>18||t.col<0){const r=new c(e.currentBoard,e.previousBoard,`Invalid value in stonePlay col: ${t.col} `,e);return new u(!0,r)}if(t.row>18||t.row<0){const r=new c(e.currentBoard,e.previousBoard,`Invalid value in stonePlay row: ${t.row} `,e);return new u(!0,r)}if(W(e.currentBoard,e.stonePlay)){const r=new c(e.currentBoard,e.previousBoard,`Invalid value in stone play - target intersection is occupied: ${t.row}, ${t.col}`,e);return r.isCollision=!0,new u(!0,r)}return new u(!1,new c(e.currentBoard,e.previousBoard,"Sumission Not Yet Handled",e))}function V(e){if(D(e.currentBoard,"w")<3)return new u(!1,new c(e.currentBoard,e.previousBoard,"Sumission Not Yet Handled",e));if(e.previousBoard==null){const o=new c(e.currentBoard,e.previousBoard,"Missing Previous Board for Ko Compare",e);return new u(!0,o)}if(!B(e.previousBoard)){const o=new c(e.currentBoard,e.previousBoard,"Previous Board dimensions are not valid",e);return new u(!0,o)}if(S(e.previousBoard)){const o=new c(e.currentBoard,e.previousBoard,"Previous Board contains invalid entries",e);return new u(!0,o)}return new u(!1,new c(e.currentBoard,e.previousBoard,"Sumission Not Yet Handled",e))}function j(e){if(e.currentBoard==null){const r=new c(e.currentBoard,e.previousBoard,"Missing Current Board in submision",e);return new u(!0,r)}if(!B(e.currentBoard)){const r=new c(e.currentBoard,e.previousBoard,"Missing Current Board dimensions are not valid",e);return new u(!0,r)}if(S(e.currentBoard)){const r=new c(e.currentBoard,e.previousBoard,"Current Board contains invalid entries",e);return new u(!0,r)}return new u(!1,new c(e.currentBoard,e.previousBoard,"Sumission Not Yet Handled",e))}function B(e){for(const o of e)if(o.length!==19)return!1;return e.length===19}function S(e){return e.reduce((t,r)=>t+r.reduce((o,n)=>o+([d,a,p].includes(n)?0:1),0),0)}function D(e,t){return e.reduce((r,o)=>r+o.reduce((n,i)=>n+(i===t?1:0),0),0)}function H(e){const t=_(e);return z(t).length>0}function L(e,t,r){if(e.length<1){const o=C(t.stoneGroups,r.stoneColorOfThisTurn);if(y(o).length>0)return!0}return!1}function M(e){const t=k(e.currentBoard);return t[e.stonePlay.row][e.stonePlay.col]=e.stoneColorOfThisTurn,t}function k(e){return JSON.parse(JSON.stringify(e))}function C(e,t){return e.filter(r=>r.stoneColor===t)}function y(e){return e.filter(t=>t.libertiesSet.size<1)}function _(e){return e.filter(t=>t.libertiesSet.size>0)}function z(e){return e.filter(t=>t.liberties===1)}function Y(e,t){let r=0;for(const o of t)for(const n of o.intersections)e[n.row][n.col]=p,r++;return r}function J(e,t){return JSON.stringify(e)===JSON.stringify(t)}function W(e,t){return e[t.row][t.col]!==p}class ${constructor(t,r){s(this,"row");s(this,"col");this.col=r,this.row=t}}class F{constructor(t,r,o,n,i){s(this,"previousBoard");s(this,"currentBoard");s(this,"stonePlay");s(this,"actionType");s(this,"stoneColorOfThisTurn");this.stonePlay=t,this.currentBoard=o,this.previousBoard=r,this.actionType=n,this.stoneColorOfThisTurn=i}}function Q(e){const t=e.split(" ").join("").split(","),r=[];for(let o=0;o<t.length;o++){const n=t[o],i=Array.from(n),h=[];for(let w=0;w<n.length;w++)h.push(i[w]);r.push(h)}return r}l.BaseSubmissionResult=f,l.StonePlay=$,l.Submission=F,l.evaluateSubmission=R,l.stringBoardToArray=Q,Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});
